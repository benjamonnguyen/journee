package journal

import "fmt"

templ JournalView() {
	<style>
        input[name="date"] {
            margin-bottom: 2px;
        }
        #journal-content-container {
            margin-bottom: 15px;
        }
        #journal-content {
            font-size:12pt;
            resize: none;
            width: 100%;
            height: 20vh;
            padding: 10px;
            box-sizing: border-box;
        }
        #form-footer {
            display: flex;
            align-items: center;
            flex-direction: column;
            width: 100%;
            margin-top: 1.5rem;
        }
        #energy-slider-container {
            margin-bottom: 1.5rem;
        }
        #emotion-selection-container {
            margin-bottom: 1.5rem;
        }
        button[type="submit"] {
            padding: 0.5rem 1.2rem;
            font-size: medium;
            border-radius: 5px;
            color: var(--grey-200);
        }
        button:not([disabled]) {
            color: white;
            background-color: var(--blue-primary);
            border-color: transparent;
        }
        button:not([disabled]):hover {
            background-color: var(--blue-secondary);
        }
        #status {
            color: var(--grey-800);
            font-size: small;
        }
        #status.status-err {
            color: var(--red-primary);
        }
    </style>
	<div
		id="app"
		x-data="{
            status: {
                msg: 'Synchronized',
                cls: '',
            },
        }"
	>
		<form
			id="journal-form"
		>
			<input
				type="date"
				name="date"
				@change="status.msg = 'Loading...'; status = await onDateChange()"
				x-init="$el.value = new Date().toLocaleDateString('en-CA'); status = onDateChange();"
			/>
			<div id="journal-content-container">
				<textarea
					id="journal-content"
					name="content"
					autofocus
					@input.throttle.1000ms="updateJournal('content')"
				></textarea>
			</div>
			// @energySlider(0, 100)
			// @emotionSelection()
			<div id="form-footer">
				<span id="status" x-text="status.msg" :class="status.cls"></span>
			</div>
		</form>
	</div>
	<script>
        const formEl = document.querySelector("#journal-form");
        const dateEl = document.querySelector("#journal-form input[type='date']");
        const contentEl = document.querySelector("#journal-content");
        const energySlider = document.querySelector("#energy-slider-container");

        /**
        * @typedef {Object} JournalData
        * @property {string} date
        * @property {string} content
        * @property {number} emotionID
        * @property {number} energyLevel
        */

        /**
        * @typedef {Object} Status
        * @property {string} msg
        * @property {string} cls
        */

        async function updateJournal(el) {
            const formData = new FormData(formEl);
            const response = await fetch(`/api/journal/${formData.get("date")}/${el}`, {
                method: "POST",
                body: formData.get(el),
                headers: {
                    "Content-Type": "text/html",
                },
            });

            return await handleResponse(response);
        }

        /** @returns {Status} */
        async function onDateChange() {
            const resp = await fetch("/api/journal/"+dateEl.value);

            if (resp.status == 404) {
                return { msg: resp.statusText, cls: "status-err" };
            }

            if (resp.ok) {
                /** @type {JournalData} */
                const journalData = await resp.json();
                contentEl.value = journalData.content;
            } else if (resp.status == 404) {
                contentEl.value = '';
                // this.form.EnergyLevel = 50;
                // this.form.EmotionID = 0;
            }
            // document.querySelector("#energy-slider").dispatchEvent(new CustomEvent("input"));

            return { msg: "Synchronized" };
        }

        /** @param {Response} response */
        async function handleResponse(response) {
            if (response.redirected) {
                window.location.href = response.url;
                return;
            }

            if (!response.ok) {
                return { msg: (await response.json()).message, cls: 'status-err' };
            } else {
                return { msg: "Synchronized" };
            }
        }
    </script>
}

templ emotionSelection() {
	// TODO (D) style pointer, zoom on hover, invisible radio, glowing selected emoji; tooltip after 2 seconds
	<style>
        fieldset {
            display: flex;
            padding: 10px;
            width: fit-content;
            margin-bottom: 5px;
        }

        fieldset label {
            display: inline-block;
            margin-right: 10px;
        }
    </style>
	<div class="emotion-selection-container">
		<fieldset id="emotion-selection" required>
			<legend style="align: center; margin: 0 auto;">How did you feel overall today?</legend>
			for _, opt := range emotionOptions {
				<div>
					<input type="radio" id={ opt.getID() } value={ opt.getID() } x-model="form.EmotionID" name="emotion-selection" aria-label={ opt.Name }/>
					<label for={ opt.getID() }>{ opt.Emoji }</label>
				</div>
			}
		</fieldset>
	</div>
}

templ energySlider(min, max int) {
	<style>
        input[type="range"] {
            width: 100%;
            height: 6px;
            -webkit-appearance: none;
            background: #ddd;
            border-radius: 4px;
            outline: none;
            margin-top: 20px;
        }

        /* Hide default thumb */
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 30px;
            height: 30px;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
            outline: none;
        }

        input[type="range"]::-moz-range-thumb {
            width: 30px;
            height: 30px;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
            outline: none;
        }

        #energy-slider-container {
            text-align: center;
        }

        #value-display {
            font-size: 16px;
        }

        #slider-thumb {
            position: absolute;
            font-size: 22px;
            transform: translateX(-50%) translateY(-75%);
            pointer-events: none;
            user-select: none;
        }
    </style>
	<div id="energy-slider-container">
		<div style="position: relative;">
			<legend id="value-display">What was your energy level when you woke up?</legend>
			<input
				type="range"
				id="energy-slider"
				name="energy-level"
				x-model="form.EnergyLevel"
				min={ fmt.Sprintf("%d", min) }
				max={ fmt.Sprintf("%d", max) }
				@input="updateDisplay"
			/>
			<div id="slider-thumb">⚪</div>
		</div>
	</div>
	@templ.JSONScript("energy-thresholds", energyThresholds)
	<script>
        const slider = document.getElementById('energy-slider');
        const sliderThumb = document.getElementById('slider-thumb');
        const valueDisplay = document.getElementById('value-display');

        const energyThresholds = JSON.parse(document.getElementById('energy-thresholds').textContent);

        function getEmoji(value) {
            if (this.form.EnergyLevel == -1) return "⚪";
            for (let i = 0; i < energyThresholds.length; i++) {
                if (value <= energyThresholds[i].Threshold) {
                    return energyThresholds[i].Emoji;
                }
            }
            return energyThresholds[-1].Emoji;
        }

        function updateSliderThumb() {
            const value = (this.form.EnergyLevel == -1) ? 50 : slider.value;
            const percent = (value - slider.min) / (slider.max - slider.min);
            const thumbPosition = percent * (slider.offsetWidth);
            sliderThumb.style.left = `${thumbPosition}px`;
        }

        function updateDisplay() {
            const value = slider.value;
            valueDisplay.textContent = (this.form.EnergyLevel != -1) ? "Energy level: " + value + "%" : "What was your energy level when you woke up?";
            sliderThumb.textContent = getEmoji(value);
            updateSliderThumb();
        }

        window.addEventListener('resize', updateSliderThumb);
    </script>
}
