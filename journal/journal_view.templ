package journal

import "fmt"

templ JournalView() {
	<style>
    <style>
        form {
            height: 80vh;
        }
	<style>
        form {
            height: 80vh;
        }
        input[name="date"] {
            margin-bottom: 2px;
        }
        #journal-content-container {
            margin-bottom: 15px;
            height: 50%;
        }
        #journal-content {
            font-size:12pt;
            resize: none;
            width: 100%;
        }
        #form-footer {
            display: flex;
            align-items: center;
            flex-direction: column;
            width: 100%;
            height: 20%;
            margin-top: 1.5rem;
        }
        #energy-slider-container {
            margin-bottom: 1.5rem;
            height: 15%;
        }
        #emotion-selection-container {
            margin-bottom: 1.5rem;
            height: 15%;
        }
        button[type="submit"] {
            padding: 0.5rem 1.2rem;
            font-size: medium;
            border-radius: 5px;
            color: var(--grey-200);
        }
        button:not([disabled]) {
            color: white;
            background-color: var(--blue-primary);
            border-color: transparent;
        }
        button:not([disabled]):hover {
            background-color: var(--blue-secondary);
        }
        #status {
            margin-top: 1.5rem;
            color: var(--grey-800);
            font-size: small;
        }
    </style>
	<div
		id="app"
		x-data="{
            form: {
                Date: new Date().toLocaleDateString('en-CA'),
                Content: '',
                EnergyLevel: 50,
                EmotionID: 0,
            },
            isEnergySet: false,
            clearForm() {
                this.form.Content = '';
                this.form.EnergyLevel = 50;
                this.form.EmotionID = 0;
                this.isEnergySet = false;
            },
            status: '',
        }"
	>
		<form @submit.prevent="onSubmit" @input="if ($event.target.type != 'date') status = 'Unsaved changes'">
			<input type="date" name="date" x-model="form.Date" @change="onDateChange" x-init="onDateChange"/>
			<div id="journal-content-container">
				<textarea id="journal-content" name="content" x-model="form.Content" autofocus></textarea>
			</div>
			@energySlider(0, 100)
			@emotionSelection()
			<div id="form-footer">
				<button type="submit" :disabled="status != 'Unsaved changes'">Save</button>
				<span id="status" x-text="status" x-show="status"></span>
			</div>
		</form>
	</div>
	<script>
        async function onSubmit() {
            const timeout = setTimeout(() => {
                this.status = "Saving...";
            }, 500);
            this.form.EnergyLevel = this.isEnergySet ? parseInt(this.form.EnergyLevel) : -1;
            this.form.EmotionID = parseInt(this.form.EmotionID);
            const response = await fetch("/api/journal", {
                method: "POST",
                body: JSON.stringify(this.form),
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (response.redirected) {
                window.location.href = response.url;
                return;
            }

            clearTimeout(timeout);
            if (!response.ok) {
                this.status = (await response.json()).message;
            } else {
                this.status = "Synchronized";
            }
        }

        async function onDateChange() {
            const timeout = setTimeout(() => {
                this.status = "Loading...";
            }, 500);
            const resp = await fetch("/api/journal/"+this.form.Date);
            if (resp.ok) {
                this.form = await resp.json();
                this.isEnergySet = this.form.EnergyLevel != -1;
            } else {
                this.clearForm();
            }
            clearTimeout(timeout);
            this.status = "Synchronized";
        }
    </script>
}

templ emotionSelection() {
	// TODO (D) style pointer, zoom on hover, invisible radio, glowing selected emoji; tooltip after 2 seconds
	<div class="emotion-selection-container">
		<fieldset id="emotion-selection" required>
			<legend style="align: center; margin: 0 auto;">How did you feel overall today?</legend>
			for _, opt := range emotionOptions {
				<div>
					<input type="radio" id={ opt.getID() } value={ opt.getID() } x-model="form.EmotionID" name="emotion-selection" aria-label={ opt.Name }/>
					<label for={ opt.getID() }>{ opt.Emoji }</label>
				</div>
			}
		</fieldset>
	</div>
}

templ energySlider(min, max int) {
	<style>
        input[type="range"] {
            width: 100%;
            height: 6px;
            -webkit-appearance: none;
            background: #ddd;
            border-radius: 4px;
            outline: none;
            margin-top: 20px;
        }

        /* Hide default thumb */
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 30px;
            height: 30px;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
        }

        input[type="range"]::-moz-range-thumb {
            width: 30px;
            height: 30px;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
        }

        #energy-slider-container {
            text-align: center;
        }

        #value-display {
            font-size: 16px;
        }

        #slider-thumb {
            position: absolute;
            font-size: 22px;
            transform: translateX(-50%) translateY(-75%);
            pointer-events: none;
            user-select: none;
        }
    </style>
	<div id="energy-slider-container">
		<div style="position: relative;">
			<legend id="value-display">What was your energy level when you woke up?</legend>
			<input
				type="range"
				id="energy-slider"
				name="energy-level"
				x-model="form.EnergyLevel"
				min={ fmt.Sprintf("%d", min) }
				max={ fmt.Sprintf("%d", max) }
			/>
			<div id="slider-thumb">⚪</div>
		</div>
	</div>
	@templ.JSONScript("energy-thresholds", energyThresholds)
	<script>
        const slider = document.getElementById('energy-slider');
        const sliderThumb = document.getElementById('slider-thumb');
        const valueDisplay = document.getElementById('value-display');

        const energyThresholds = JSON.parse(document.getElementById('energy-thresholds').textContent);

        function getEmoji(value) {
            for (let i = 0; i < energyThresholds.length; i++) {
                if (value <= energyThresholds[i].Threshold) {
                    return energyThresholds[i].Emoji;
                }
            }
            return energyThresholds[-1].Emoji;
        }

        function updateSliderThumb() {
            const value = slider.value;
            const percent = (value - slider.min) / (slider.max - slider.min);
            const thumbPosition = percent * (slider.offsetWidth);
            sliderThumb.style.left = `${thumbPosition}px`;
        }

        function updateDisplay() {
            const value = slider.value;
            this.isEnergySet = true;
            valueDisplay.textContent = "Energy level: " + value + "%";
            sliderThumb.textContent = getEmoji(value);
            updateSliderThumb();
        }

        function resetDisplay() {
            valueDisplay.textContent = "What was your energy level when you woke up?";
            sliderThumb.textContent = "⚪";
            this.clearForm();
            updateSliderThumb();
        }

        slider.addEventListener('input', updateDisplay);
        window.addEventListener('resize', updateSliderThumb);

        updateSliderThumb();
    </script>
}
