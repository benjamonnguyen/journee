package journal

import (
    "fmt"
)

templ JournalView() {
    <style>
        #journal-textarea {
            margin-bottom: 15px;
        }
        #journal-textarea input {
            font-size:12pt;
            resize: none;
            width: 100%;
            height: 20vh;
        }
        #form-footer {
            display: flex;
            align-items: center;
            flex-direction: column;
            width: 100%;
        }
        #energy-slider-container {
            margin-bottom: 1.5rem;
        }
        #emotion-selection {
            margin-bottom: 1.5rem;
        }
        button[type="submit"] {
            padding: 0.5rem 1.2rem;
            font-size: medium;
        }
        #status {
            margin-top: 1.5rem;
            color: var(--grey-800);
            font-size: small;
        }
    </style>
    <div
        id="app"
        x-data="{
            form: {
                Date: new Date().toLocaleDateString('en-CA'),
                Content: '',
                EnergyLevel: null,
                EmotionID: 0,
            },
            status: '',
        }">
        <form @submit.prevent="onSubmit">
            <input type="date" name="date" x-model="form.Date" />
            <div id="journal-textarea">
                <textarea name="content" x-model="form.Content" autofocus></textarea>
            </div>

            @energySlider(0, 100)
            @emotionSelection()

            <div id="form-footer">
                <button type="submit">Save</button>
                <span id="status" x-text="status" x-show="status"></span>
            </div>
        </form>
    </div>
    <script>
        async function onSubmit() {
            const response = await fetch("/api/journal", {
                method: "POST",
                body: JSON.stringify(this.form),
                headers: {
                    "Content-Type": "application/json",
                },
            });
            if (!response.ok) {
                this.status = (await response.json()).message;
            } else {
                this.status = "Synchronized";
            }
        }
    </script>
}

templ emotionSelection() {
    // TODO (D) style pointer, zoom on hover, invisible radio, glowing selected emoji
    <fieldset id="emotion-selection" required>
        <legend style="align: center; margin: 0 auto;">How did you feel overall today?</legend>
        for _, opt := range emotionOptions {
            <div>
                <input type="radio" id={ opt.getID() } value={ opt.getID() } x-model="form.EmotionID" name="emotion-selection" />
                <label for={ opt.getID() }>{ opt.Emoji }</label>
            </div>
        }
    </fieldset>
}

templ energySlider(min, max int) {
    <style>
        input[type="range"] {
            width: 100%;
            height: 6px;
            -webkit-appearance: none;
            background: #ddd;
            border-radius: 4px;
            outline: none;
            margin-top: 20px;
        }

        /* Hide default thumb */
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 30px;
            height: 30px;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
        }

        input[type="range"]::-moz-range-thumb {
            width: 30px;
            height: 30px;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
        }

        #energy-slider-container {
            text-align: center;
        }

        #value-display {
            font-size: 16px;
        }

        #slider-thumb {
            position: absolute;
            font-size: 22px;
            transform: translateX(-50%) translateY(-75%);
            pointer-events: none;
            user-select: none;
        }
    </style>

    <div id="energy-slider-container">
        <div style="position: relative;">
            <legend id="value-display">What was your energy level when you woke up?</legend>
            <input type="range" id="energy-slider" name="energy-level" x-model="form.EnergyLevel"
                min={ fmt.Sprintf("%d", min) }
                max={ fmt.Sprintf("%d", max) } />
            <div id="slider-thumb">âšª</div>
        </div>
    </div>

    @templ.JSONScript("energy-thresholds", energyThresholds)
    <script>
        const slider = document.getElementById('energy-slider');
        const sliderThumb = document.getElementById('slider-thumb');
        const valueDisplay = document.getElementById('value-display');

        const energyThresholds = JSON.parse(document.getElementById('energy-thresholds').textContent);

        function getEmoji(value) {
            for (let i = 0; i < energyThresholds.length; i++) {
                if (value <= energyThresholds[i].Threshold) {
                    return energyThresholds[i].Emoji;
                }
            }
            return energyThresholds[-1].Emoji;
        }

        function updateSliderThumb(val = null) {
            const value = val ?? slider.value;
            const percent = (value - slider.min) / (slider.max - slider.min);
            const thumbPosition = percent * (slider.offsetWidth);
            sliderThumb.style.left = `${thumbPosition}px`;
        }

        function updateDisplay() {
            const value = slider.value;
            valueDisplay.textContent = "Energy level: " + value + "%";
            sliderThumb.textContent = getEmoji(value);
            updateSliderThumb();
        }

        slider.addEventListener('input', updateDisplay);
        window.addEventListener('resize', updateSliderThumb);

        // Initial update
        updateSliderThumb((slider.min + slider.max)/2);
    </script>
}