package journal

import "fmt"

// TODO better design. dispatch status event to status element to maintain LOB
templ JournalView() {
	<style>
        #datepicker {
            margin-bottom: 2px;
        }
        #datepicker::-webkit-calendar-picker-indicator{
            display: none;
        }
        #journal-form {
            width: 90vw;
        }
        #journal-content-container {
            margin-bottom: 15px;
        }
        @media (max-width: 767px) {
            #journal-content:focus {
                height: 50vh;
            }
        }
        #journal-content {
            font-size:12pt;
            resize: none;
            width: 100%;
            height: 20vh;
            padding: 10px;
            box-sizing: border-box;
        }
        #form-footer {
            display: flex;
            align-items: center;
            flex-direction: column;
            width: 100%;
            margin-top: 1.5rem;
        }
        #tracker-container {
            width: 100%;
            display: flex;
            align-items: center;
            flex-direction: column;
        }
        #energy-slider-container {
            margin-bottom: 1.5rem;
            max-width: 30rem;
            width: 100%;
        }
        #emotion-selection-container {
            margin-bottom: 1.5rem;
            max-width: 30rem;
        }
        #status {
            color: var(--grey-800);
            font-size: small;
        }
        #status.status-err {
            color: var(--red-primary);
        }
        .datepicker-dot {
            display: block;
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: red; /* You can change the color */
            margin: 0 auto;
            margin-top: 5px; /* Adjust the space between the day number and the dot */
        }
    </style>
	<div
		id="app"
		x-data="{
            status: {
                msg: 'Synchronized',
                cls: '',
            },
            selectedEmotionID: 0,
            async onDateChange() {
                this.status.msg = 'Loading...';
                const resp = await fetch('/api/journal/'+$refs.date.value);

                if (!resp.ok && resp.status != 404) {
                    this.status = { msg: resp.statusText, cls: 'status-err' };
                }

                if (resp.ok) {
                    const journalData = await resp.json();
                    $refs.content.value = journalData.content;
                    this.selectedEmotionID = journalData.emotionID;
                    setEnergyLevel(journalData.energyLevel);
                } else {
                    $refs.content.value = '';
                    this.selectedEmotionID = 0;
                    resetEnergyLevel();
                }

                this.status.msg = 'Synchronized';
            },
            async updateJournal(el) {
                const formData = new FormData($refs.form);
                const response = await fetch(`/api/journal/${formData.get('date')}/${el}`, {
                    method: 'POST',
                    body: formData.get(el),
                });

                if (response.redirected) {
                    window.location.href = response.url;
                    return;
                }

                if (!response.ok) {
                    this.status = { msg: (await response.json()).message, cls: 'status-err' };
                } else {
                    this.status.msg = 'Synchronized';
                }
            },
            showTrackers: true,
        }"
		@keyup.s="
        if ($event.ctrlKey) {
            $event.preventDefault();
            document.querySelector('button[type=\'submit\']')?.click();
        }"
		@keyup.e="
        if ($event.ctrlKey) {
            $event.preventDefault();
            $refs.content.focus();
        }"
	>
		<form
			id="journal-form"
			x-ref="form"
		>
			<input
				id="datepicker"
				name="date"
				type="date"
				x-ref="date"
				@change="onDateChange"
				x-init="$el.value = new Date().toLocaleDateString('en-CA'); await onDateChange();"
			/>
			<div id="journal-content-container">
				<textarea
					id="journal-content"
					x-ref="content"
					name="content"
					@input="status.msg = 'Unsaved changes'"
					@input.throttle.1000ms="updateJournal('content')"
					@input.debounce.1000ms="updateJournal('content')"
					@blur="showTrackers = true; $dispatch('update-slider')"
					@focus="
                    if (window.innerWidth < 768) {
                        showTrackers = false;
                        $refs.date.scrollIntoView({
                            block: 'start'
                        });
                    }"
				></textarea>
			</div>
			<div id="tracker-container" x-show="showTrackers">
				@energySlider(1, 100)
				@emotionSelection()
			</div>
			<div id="form-footer">
				<span id="status" x-text="status.msg" :class="status.cls"></span>
			</div>
		</form>
	</div>
	<script>
        // datepicker
        const dateInput = document.querySelector("#datepicker");
        const dp = new AirDatepicker("#datepicker", {
            locale: localeEn,
            onSelect({date, datepicker}) {
                datepicker.$el.value = date?.toLocaleDateString("en-CA");
                dateInput.dispatchEvent(new CustomEvent("change"));
                datepicker.cl
            },
            maxDate: dateInput.value,
            // /** @param {Date} date */
            // onRenderCell({date, cellType}) {
            //     // TODO migrate to date type; fetch all in a month
            //     if (cellType === 'day') {
            //         return {
            //             html: '<span class="datepicker-day-number">' + date. + '</span><span class="datepicker-dot"></span>'
            //         };
            //     }
            // },
            buttons: ['today'],
            autoClose: true,
        });

        /**
        * @typedef {Object} JournalData
        * @property {string} date
        * @property {string} content
        * @property {number} emotionID
        * @property {number} energyLevel
        */

        /**
        * @typedef {Object} Status
        * @property {string} msg
        * @property {string} cls
        */
    </script>
}

templ emotionSelection() {
	// TODO (D) style pointer, zoom on hover, invisible radio, glowing selected emoji; tooltip after 2 seconds
	<style>
        fieldset {
            display: flex;
            padding: 10px;
            width: fit-content;
            margin-bottom: 5px;
        }

        fieldset label {
            display: inline-block;
            margin-right: 10px;
        }
    </style>
	<div class="emotion-selection-container">
		<fieldset required>
			<legend style="align: center; margin: 0 auto;">How did you feel overall today?</legend>
			for _, opt := range emotionOptions {
				<div>
					<input
						type="radio"
						id={ opt.getID() }
						value={ opt.getID() }
						name="emotion_id"
						aria-label={ opt.Name }
						x-model="selectedEmotionID"
						@input="status.msg = 'Saving...'; updateJournal('emotion_id')"
					/>
					<label for={ opt.getID() }>{ opt.Emoji }</label>
				</div>
			}
		</fieldset>
	</div>
}

templ energySlider(min, max int) {
	<style>
        input[type="range"] {
            width: 100%;
            height: 6px;
            -webkit-appearance: none;
            background: #ddd;
            border-radius: 4px;
            outline: none;
            margin-top: 20px;
            cursor: pointer;
        }

        /* Hide default thumb */
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 30px;
            height: 30px;
            background: transparent;
            border: none;
            position: relative;
            outline: none;
        }

        input[type="range"]::-moz-range-thumb {
            width: 30px;
            height: 30px;
            background: transparent;
            border: none;
            position: relative;
            outline: none;
        }

        #energy-slider-container {
            text-align: center;
        }

        #value-display {
            font-size: 16px;
        }

        #slider-thumb {
            position: absolute;
            font-size: 22px;
            transform: translateX(-50%) translateY(-75%);
            pointer-events: none;
            user-select: none;
        }
    </style>
	<div id="energy-slider-container">
		<div style="position: relative;">
			<legend id="value-display">What was your energy level when you woke up?</legend>
			<input
				type="range"
				id="energy-slider"
				name="energy_level"
				min={ fmt.Sprintf("%d", min) }
				max={ fmt.Sprintf("%d", max) }
				@input="setEnergyLevel($el.value)"
				@input.debounce.500ms="status.msg = 'Saving...'; updateJournal('energy_level')"
				x-init="resetEnergyLevel"
				@update-slider.window="$nextTick(() => updateSliderThumb())"
			/>
			<div id="slider-thumb">âšª</div>
		</div>
	</div>
	@templ.JSONScript("energy-thresholds", energyThresholds)
	<script>
        const slider = document.getElementById('energy-slider');
        const sliderThumb = document.getElementById('slider-thumb');
        const valueDisplay = document.getElementById('value-display');

        const energyThresholds = JSON.parse(document.getElementById('energy-thresholds').textContent);

        function getEmoji(value) {
            for (let i = 0; i < energyThresholds.length; i++) {
                if (value <= energyThresholds[i].Threshold) {
                    return energyThresholds[i].Emoji;
                }
            }
            return energyThresholds[-1].Emoji;
        }

        function updateSliderThumb() {
            const percent = slider.value / slider.max;
            const thumbPosition = percent * (slider.offsetWidth);
            sliderThumb.style.left = `${thumbPosition}px`;
        }

        function resetEnergyLevel() {
            slider.value = 50;
            valueDisplay.textContent = "What was your energy level when you woke up?";
            sliderThumb.textContent = "âšª";
            updateSliderThumb();
        }

        function setEnergyLevel(n) {
            slider.value = n;
            valueDisplay.textContent = "Energy level: " + slider.value + "%";
            sliderThumb.textContent = getEmoji(slider.value);
            updateSliderThumb();
        }

        window.addEventListener('resize', updateSliderThumb);
    </script>
}
