// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package journal

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "fmt"

func JournalView() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<style>\n    <style>\n        form {\n            height: 80vh;\n        }\n\t<style>\n        form {\n            height: 80vh;\n        }\n        input[name=\"date\"] {\n            margin-bottom: 2px;\n        }\n        #journal-content-container {\n            margin-bottom: 15px;\n            height: 50%;\n        }\n        #journal-content {\n            font-size:12pt;\n            resize: none;\n            width: 100%;\n        }\n        #form-footer {\n            display: flex;\n            align-items: center;\n            flex-direction: column;\n            width: 100%;\n            height: 20%;\n            margin-top: 1.5rem;\n        }\n        #energy-slider-container {\n            margin-bottom: 1.5rem;\n            height: 15%;\n        }\n        #emotion-selection-container {\n            margin-bottom: 1.5rem;\n            height: 15%;\n        }\n        button[type=\"submit\"] {\n            padding: 0.5rem 1.2rem;\n            font-size: medium;\n            border-radius: 5px;\n            color: var(--grey-200);\n        }\n        button:not([disabled]) {\n            color: white;\n            background-color: var(--blue-primary);\n            border-color: transparent;\n        }\n        button:not([disabled]):hover {\n            background-color: var(--blue-secondary);\n        }\n        #status {\n            margin-top: 1.5rem;\n            color: var(--grey-800);\n            font-size: small;\n        }\n    </style><div id=\"app\" x-data=\"{\n            form: {\n                Date: new Date().toLocaleDateString(&#39;en-CA&#39;),\n                Content: &#39;&#39;,\n                EnergyLevel: 50,\n                EmotionID: 0,\n            },\n            isEnergySet: false,\n            clearForm() {\n                this.form.Content = &#39;&#39;;\n                this.form.EnergyLevel = 50;\n                this.form.EmotionID = 0;\n                this.isEnergySet = false;\n            },\n            status: &#39;&#39;,\n        }\"><form @submit.prevent=\"onSubmit\" @input=\"if ($event.target.type != &#39;date&#39;) status = &#39;Unsaved changes&#39;\"><input type=\"date\" name=\"date\" x-model=\"form.Date\" @change=\"onDateChange\" x-init=\"onDateChange\"><div id=\"journal-content-container\"><textarea id=\"journal-content\" name=\"content\" x-model=\"form.Content\" autofocus></textarea></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = energySlider(0, 100).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = emotionSelection().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div id=\"form-footer\"><button type=\"submit\" :disabled=\"status != &#39;Unsaved changes&#39;\">Save</button> <span id=\"status\" x-text=\"status\" x-show=\"status\"></span></div></form></div><script>\n        async function onSubmit() {\n            const timeout = setTimeout(() => {\n                this.status = \"Saving...\";\n            }, 500);\n            this.form.EnergyLevel = this.isEnergySet ? parseInt(this.form.EnergyLevel) : -1;\n            this.form.EmotionID = parseInt(this.form.EmotionID);\n            const response = await fetch(\"/api/journal\", {\n                method: \"POST\",\n                body: JSON.stringify(this.form),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            });\n\n            if (response.redirected) {\n                window.location.href = response.url;\n                return;\n            }\n\n            clearTimeout(timeout);\n            if (!response.ok) {\n                this.status = (await response.json()).message;\n            } else {\n                this.status = \"Synchronized\";\n            }\n        }\n\n        async function onDateChange() {\n            const timeout = setTimeout(() => {\n                this.status = \"Loading...\";\n            }, 500);\n            const resp = await fetch(\"/api/journal/\"+this.form.Date);\n            if (resp.ok) {\n                this.form = await resp.json();\n                this.isEnergySet = this.form.EnergyLevel != -1;\n            } else {\n                this.clearForm();\n            }\n            clearTimeout(timeout);\n            this.status = \"Synchronized\";\n        }\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func emotionSelection() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"emotion-selection-container\"><fieldset id=\"emotion-selection\" required><legend style=\"align: center; margin: 0 auto;\">How did you feel overall today?</legend> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, opt := range emotionOptions {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div><input type=\"radio\" id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(opt.getID())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `journal/journal_view.templ`, Line: 147, Col: 41}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(opt.getID())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `journal/journal_view.templ`, Line: 147, Col: 63}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" x-model=\"form.EmotionID\" name=\"emotion-selection\" aria-label=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(opt.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `journal/journal_view.templ`, Line: 147, Col: 137}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\"> <label for=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(opt.getID())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `journal/journal_view.templ`, Line: 148, Col: 29}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(opt.Emoji)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `journal/journal_view.templ`, Line: 148, Col: 43}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</label></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</fieldset></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func energySlider(min, max int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<style>\n        input[type=\"range\"] {\n            width: 100%;\n            height: 6px;\n            -webkit-appearance: none;\n            background: #ddd;\n            border-radius: 4px;\n            outline: none;\n            margin-top: 20px;\n        }\n\n        /* Hide default thumb */\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            width: 30px;\n            height: 30px;\n            cursor: pointer;\n            background: transparent;\n            border: none;\n            position: relative;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 30px;\n            height: 30px;\n            cursor: pointer;\n            background: transparent;\n            border: none;\n            position: relative;\n        }\n\n        #energy-slider-container {\n            text-align: center;\n        }\n\n        #value-display {\n            font-size: 16px;\n        }\n\n        #slider-thumb {\n            position: absolute;\n            font-size: 22px;\n            transform: translateX(-50%) translateY(-75%);\n            pointer-events: none;\n            user-select: none;\n        }\n    </style><div id=\"energy-slider-container\"><div style=\"position: relative;\"><legend id=\"value-display\">What was your energy level when you woke up?</legend> <input type=\"range\" id=\"energy-slider\" name=\"energy-level\" x-model=\"form.EnergyLevel\" min=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", min))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `journal/journal_view.templ`, Line: 211, Col: 32}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" max=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", max))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `journal/journal_view.templ`, Line: 212, Col: 32}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\"><div id=\"slider-thumb\">⚪</div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("energy-thresholds", energyThresholds).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<script>\n        const slider = document.getElementById('energy-slider');\n        const sliderThumb = document.getElementById('slider-thumb');\n        const valueDisplay = document.getElementById('value-display');\n\n        const energyThresholds = JSON.parse(document.getElementById('energy-thresholds').textContent);\n\n        function getEmoji(value) {\n            for (let i = 0; i < energyThresholds.length; i++) {\n                if (value <= energyThresholds[i].Threshold) {\n                    return energyThresholds[i].Emoji;\n                }\n            }\n            return energyThresholds[-1].Emoji;\n        }\n\n        function updateSliderThumb() {\n            const value = slider.value;\n            const percent = (value - slider.min) / (slider.max - slider.min);\n            const thumbPosition = percent * (slider.offsetWidth);\n            sliderThumb.style.left = `${thumbPosition}px`;\n        }\n\n        function updateDisplay() {\n            const value = slider.value;\n            this.isEnergySet = true;\n            valueDisplay.textContent = \"Energy level: \" + value + \"%\";\n            sliderThumb.textContent = getEmoji(value);\n            updateSliderThumb();\n        }\n\n        function resetDisplay() {\n            valueDisplay.textContent = \"What was your energy level when you woke up?\";\n            sliderThumb.textContent = \"⚪\";\n            this.clearForm();\n            updateSliderThumb();\n        }\n\n        slider.addEventListener('input', updateDisplay);\n        window.addEventListener('resize', updateSliderThumb);\n\n        updateSliderThumb();\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
