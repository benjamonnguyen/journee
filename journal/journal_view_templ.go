// Code generated by templ - DO NOT EDIT.

// templ: version: 0.2.476
package journal

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
)

func JournalView() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := `
        #journal-content-container {
            margin-bottom: 15px;
        }
        #journal-content {
            font-size:12pt;
            resize: none;
            width: 100%;
            height: 40vh;
        }
        #form-footer {
            display: flex;
            align-items: center;
            flex-direction: column;
            width: 100%;
        }
        #energy-slider-container {
            margin-bottom: 1.5rem;
        }
        #emotion-selection {
            margin-bottom: 1.5rem;
        }
        button[type="submit"] {
            padding: 0.5rem 1.2rem;
            font-size: medium;
            border-radius: 5px;
            color: var(--grey-200);
        }
        button:not([disabled]) {
            color: white;
            background-color: var(--blue-primary);
            border-color: transparent;
        }
        button:not([disabled]):hover {
            background-color: var(--blue-secondary);
        }
        #status {
            margin-top: 1.5rem;
            color: var(--grey-800);
            font-size: small;
        }
    `
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</style><div id=\"app\" x-data=\"{\n            form: {\n                Date: new Date().toLocaleDateString(&#39;en-CA&#39;),\n                Content: &#39;&#39;,\n                EnergyLevel: -1,\n                EmotionID: 0,\n            },\n            clearForm() {\n                this.form.Content = &#39;&#39;;\n                this.form.EnergyLevel = -1;\n                this.form.EmotionID = 0;\n            },\n            status: &#39;&#39;,\n        }\"><form @submit.prevent=\"onSubmit\" @input=\"if ($event.target.type != &#39;date&#39;) status = &#39;Unsaved changes&#39;\"><input type=\"date\" name=\"date\" x-model=\"form.Date\" @change=\"onDateChange\" x-init=\"onDateChange\"><div id=\"journal-content-container\"><textarea id=\"journal-content\" name=\"content\" x-model=\"form.Content\" autofocus></textarea></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = energySlider(0, 100).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = emotionSelection().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"form-footer\"><button type=\"submit\" :disabled=\"status != &#39;Unsaved changes&#39;\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var3 := `Save`
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var3)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button> <span id=\"status\" x-text=\"status\" x-show=\"status\"></span></div></form></div><script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var4 := `
        async function onSubmit() {
            const timeout = setTimeout(() => {
                this.status = "Saving...";
            }, 500);
            this.form.EnergyLevel = parseInt(this.form.EnergyLevel);
            this.form.EmotionID = parseInt(this.form.EmotionID);
            const response = await fetch("/api/journal", {
                method: "POST",
                body: JSON.stringify(this.form),
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (response.redirected) {
                window.location.href = response.url;
                return;
            }

            clearTimeout(timeout);
            if (!response.ok) {
                this.status = (await response.json()).message;
            } else {
                this.status = "Synchronized";
            }
        }

        async function onDateChange() {
            const timeout = setTimeout(() => {
                this.status = "Loading...";
            }, 500);
            const resp = await fetch("/api/journal/"+this.form.Date);
            if (resp.ok) {
                this.form = await resp.json();
            } else {
                this.clearForm()
            }
            clearTimeout(timeout);
            this.status = "Synchronized";
        }
    `
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var4)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func emotionSelection() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<fieldset id=\"emotion-selection\" required><legend style=\"align: center; margin: 0 auto;\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var6 := `How did you feel overall today?`
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var6)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</legend> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, opt := range emotionOptions {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div><input type=\"radio\" id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(opt.getID()))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(opt.getID()))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" x-model=\"form.EmotionID\" name=\"emotion-selection\" aria-label=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(opt.Name))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"> <label for=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(opt.getID()))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string = opt.Emoji
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</label></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</fieldset>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func energySlider(min, max int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var9 := `
        input[type="range"] {
            width: 100%;
            height: 6px;
            -webkit-appearance: none;
            background: #ddd;
            border-radius: 4px;
            outline: none;
            margin-top: 20px;
        }

        /* Hide default thumb */
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 30px;
            height: 30px;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
        }

        input[type="range"]::-moz-range-thumb {
            width: 30px;
            height: 30px;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
        }

        #energy-slider-container {
            text-align: center;
        }

        #value-display {
            font-size: 16px;
        }

        #slider-thumb {
            position: absolute;
            font-size: 22px;
            transform: translateX(-50%) translateY(-75%);
            pointer-events: none;
            user-select: none;
        }
    `
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var9)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</style><div id=\"energy-slider-container\"><div style=\"position: relative;\"><legend id=\"value-display\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var10 := `What was your energy level when you woke up?`
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var10)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</legend> <input type=\"range\" id=\"energy-slider\" name=\"energy-level\" x-model=\"form.EnergyLevel\" x-init=\"$watch(&#39;form.EnergyLevel&#39;, () =&gt; updateDisplay(form.EnergyLevel == -1))\" min=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", min)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" max=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", max)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><div id=\"slider-thumb\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var11 := `⚪`
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var11)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("energy-thresholds", energyThresholds).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var12 := `
        const slider = document.getElementById('energy-slider');
        const sliderThumb = document.getElementById('slider-thumb');
        const valueDisplay = document.getElementById('value-display');

        const energyThresholds = JSON.parse(document.getElementById('energy-thresholds').textContent);

        function getEmoji(value) {
            for (let i = 0; i < energyThresholds.length; i++) {
                if (value <= energyThresholds[i].Threshold) {
                    return energyThresholds[i].Emoji;
                }
            }
            return energyThresholds[-1].Emoji;
        }

        function updateSliderThumb(val = null) {
            const value = val ?? slider.value;
            const percent = (value - slider.min) / (slider.max - slider.min);
            const thumbPosition = percent * (slider.offsetWidth);
            sliderThumb.style.left = ` + "`" + `${thumbPosition}px` + "`" + `;
        }

        function updateDisplay(reset = false) {
            const value = slider.value;
            if (reset) {
                valueDisplay.textContent = "What was your energy level when you woke up?";
                sliderThumb.textContent = "⚪";
                updateSliderThumb((slider.min + slider.max)/2)
                return;
            }
            valueDisplay.textContent = "Energy level: " + value + "%";
            sliderThumb.textContent = getEmoji(value);
            updateSliderThumb();
        }

        slider.addEventListener('input', updateDisplay);
        window.addEventListener('resize', updateSliderThumb);

        // Initial update
        updateDisplay();
    `
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var12)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
